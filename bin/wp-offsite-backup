#!/usr/bin/env bash

# WP Offsite Backup
# This script is a Shell script for backup WordPress to offsite.
# URL: https://github.com/thingsym/wp-offsite-backup
# Version: 0.2.0
# Author: thingsym
# distributed under GPLv3.
# Copyright (c) 2018 thingsym

set -e

BASEPATH=$(cd $(dirname $0) && pwd)
cd $BASEPATH

TMP_DIR=../tmp
LOG_DIR=../log
CNF_DIR=../config

usage() {
  echo "WP Offsite Backup Version 0.2.0"
  echo "usage: $0 [config|--help|--config]"
  exit 0
}

list_config() {
  echo "list config: ${BASEPATH}/${CNF_DIR}"
  ls -l ${BASEPATH}/${CNF_DIR}
  exit 0
}

if [ "$1" = "--help" ]; then
  usage
elif [ "$1" = "--config" ]; then
  list_config
fi

logging() {
  if [ ! $LOG_FILE ]; then
    echo "Not Found LOG file"
    exit 1
  fi

  if [ ! -f ${LOG_DIR}/${LOG_FILE} ]; then
    touch ${LOG_DIR}/${LOG_FILE}
  fi

  echo "["`date '+%Y-%m-%d %H:%M:%S'`"] $MESSAGE" >> ${LOG_DIR}/${LOG_FILE}

  LOG_LINES=`cat ${LOG_DIR}/${LOG_FILE} | wc -l`
  if [ $MAX_LOG_LINES ] && [ 0 -lt $MAX_LOG_LINES ] && [ $LOG_LINES -gt $MAX_LOG_LINES ]; then
    cat ${LOG_DIR}/${LOG_FILE} | tail -n -$MAX_LOG_LINES > ${LOG_DIR}/${LOG_FILE}.new
    mv ${LOG_DIR}/${LOG_FILE}.new ${LOG_DIR}/${LOG_FILE}
  fi
}

load_config() {
  if [ $1 ]; then
    CONFIG=$1
  elif [ $WP_OFFSITE_BACKUP_CONFIG ]; then
    CONFIG=$WP_OFFSITE_BACKUP_CONFIG
  else
    CONFIG=default
  fi

  if [ -f "${BASEPATH}/${CNF_DIR}/${CONFIG}" ]; then
    . ${BASEPATH}/${CNF_DIR}/${CONFIG}
    echo "load CONFIG ${BASEPATH}/${CNF_DIR}/${CONFIG}"

    echo "JOB_NAME: ${JOB_NAME}"
    echo "CONFIG: ${CONFIG}"
  else
    echo "Not Found CONFIG ${BASEPATH}/${CNF_DIR}/${CONFIG}"
    exit 1
  fi
}

check_config() {
  if [ ! -d "$WP_ROOT_PATH" ]; then
    echo "Not Found WP_ROOT_PATH $WP_ROOT_PATH"
    MESSAGE="[Error] [${CONFIG}] Not Found WP_ROOT_PATH $WP_ROOT_PATH"
    logging
    exit 1
  fi
}

backup_database() {
  if [ -f "${BASEPATH}/${CNF_DIR}/${MYSQL_EXTRA_FILE}" ]; then
    mkdir ${BASEPATH}/${TMP_DIR}/database
    mysqldump --defaults-extra-file=$BASEPATH/${CNF_DIR}/$MYSQL_EXTRA_FILE --single-transaction --add-drop-table $DB_NAME > ${TMP_DIR}/database/$MYSQL_FILE
    tar -rf ${TMP_DIR}/${BACKUP_NAME}.tar -C ${TMP_DIR} database/$MYSQL_FILE
    rm -r ${BASEPATH}/${TMP_DIR}/database
    echo "backup database ${MYSQL_FILE}"
  else
    echo "Not Found MYSQL_EXTRA_FILE ${BASEPATH}/${CNF_DIR}/${MYSQL_EXTRA_FILE}"
  fi
}

backup_wordpress() {
  EXCLUDE=("${EXCLUDE[@]}" "${EXCLUDE_EXTRA[@]}")
  EXCLUDE=("${EXCLUDE[@]}" "${EXCLUDE_WP_CONTENT[@]}")
  EXCLUDE=("${EXCLUDE[@]}" "${EXCLUDE_WP_CORE[@]}")

  for ((i = 0; i < ${#EXCLUDE[@]}; i++)) {
    EXCLUDE_ARG+=" --exclude ${EXCLUDE[i]}"
  }

  if [ -d "$WP_ROOT_PATH" ]; then
    tar -rf ${TMP_DIR}/${BACKUP_NAME}.tar -C $WP_ROOT_PATH . $EXCLUDE_ARG
    echo "backup WordPress files on ${WP_ROOT_PATH}"
  else
    echo "Not Found WP_ROOT_PATH $WP_ROOT_PATH"
  fi
}

create_backup_file() {
  if [ ! -f ${TMP_DIR}/${BACKUP_NAME}.tar ]; then
    echo "Not Found ${BACKUP_NAME}.tar"
    MESSAGE="[Error] [${CONFIG}] Not Found ${BACKUP_NAME}.tar"
    logging
    exit 1
  fi

  gzip ${TMP_DIR}/${BACKUP_NAME}.tar
  echo "backup file ${BACKUP_NAME}.tar.gz"
}

store_s3() {
  if ! type aws > /dev/null 2>&1; then
    echo "Not Found aws commad"
    return;
  fi

  if [ ! $S3_URI ]; then
    return;
  fi

  if [ $AWS_PROFILE ]; then
    export AWS_DEFAULT_PROFILE=$AWS_PROFILE
    echo "set aws profile: ${AWS_PROFILE}"
  fi

  aws s3 mv ${TMP_DIR}/${BACKUP_NAME}.tar.gz $S3_URI
  echo "backup ${BACKUP_NAME}.tar.gz to S3"

  S3_FILES=`aws s3 ls $S3_URI | wc -l`
  echo "stored files to S3: ${S3_FILES} files"

  if [ $MAX_SAVED_FILES ] && [ 0 -lt $MAX_SAVED_FILES ] && [ $S3_FILES -gt $MAX_SAVED_FILES ] ; then
    aws s3 ls $S3_URI | sort -n | head -n -$MAX_SAVED_FILES | awk '{ print $4 }' | xargs -I% aws s3 rm ${S3_URI}%
    echo "delete backup files in order of older update date"
    echo "stored files to S3: ${MAX_SAVED_FILES} files"
  fi
}

create_tmp_dir() {
  if [ -d ${BASEPATH}/${TMP_DIR} ]; then
    rm -r ${BASEPATH}/${TMP_DIR}
    echo "delete older tmp directory"
  fi
  echo "create tmp directory"
  mkdir ${BASEPATH}/${TMP_DIR}
}

delete_tmp_dir() {
  if [ -d ${BASEPATH}/${TMP_DIR} ]; then
    rm -r ${BASEPATH}/${TMP_DIR}
    echo "delete tmp directory"
  fi
}

load_config $1
check_config
create_tmp_dir
if [ -d ${BASEPATH}/$TMP_DIR ]; then
  backup_database
  backup_wordpress
  create_backup_file
  store_s3
else
  echo "Not Found tmp directory"
  exit 1
fi
delete_tmp_dir

MESSAGE="[Success] [${CONFIG}] WordPress Backup complete!"
logging

exit 0
