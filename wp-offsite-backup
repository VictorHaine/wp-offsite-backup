#!/usr/bin/env bash

set -e

BASEPATH=$(cd $(dirname $0) && pwd)
cd $BASEPATH

usage() {
  echo "WP Offsite Backup Version 0.1.0"
  echo "usage: $0 [config|--help|--config]"
  exit 0
}

list_config() {
  echo "list config: ${BASEPATH}/config"
  ls -l ${BASEPATH}/config
  exit 0
}

if [ "$1" = "--help" ]; then
  usage
elif [ "$1" = "--config" ]; then
  list_config
fi

logging() {
  if [ ! -f $LOG ]; then
    touch $LOG
  fi

  echo "["`date '+%Y-%m-%d %H:%M:%S'`"] $MESSAGE" >> $LOG

  LOG_LINES=`cat $LOG | wc -l`
  if [ $MAX_LOG_LIMIT ] && [ 0 -lt $MAX_LOG_LIMIT ] && [ $LOG_LINES -gt $MAX_LOG_LIMIT ] ; then
    cat $LOG | tail -n -$MAX_LOG_LIMIT > $LOG.new
    mv $LOG.new $LOG
  fi
}

load_config() {
  if [ $1 ]; then
    CONFIG=$1
  elif [ $WP_OFFSITE_BACKUP_CONFIG ]; then
    CONFIG=$WP_OFFSITE_BACKUP_CONFIG
  else
    CONFIG=config
  fi

  if [ -f "${BASEPATH}/config/${CONFIG}" ]; then
    . ${BASEPATH}/config/${CONFIG}
    echo "load CONFIG ${BASEPATH}/config/${CONFIG}"

    echo "JOB_NAME: ${JOB_NAME}"
    echo "CONFIG: ${CONFIG}"
  else
    echo "Not Found CONFIG ${BASEPATH}/config/${CONFIG}"
    MESSAGE="[Error] [${CONFIG}] Not Found CONFIG ${BASEPATH}/config/${CONFIG}"
    logging
    exit 1
  fi
}

check_config() {
  if [ ! -d "$WP_ROOT_PATH" ]; then
    echo "Not Found WP_ROOT_PATH $WP_ROOT_PATH"
    MESSAGE="[Error] [${CONFIG}] Not Found WP_ROOT_PATH $WP_ROOT_PATH"
    logging
    exit 1
  fi
}

backup_database() {
  if [ -f "${BASEPATH}/config/${MYSQL_EXTRA_FILE}" ]; then
    mysqldump --defaults-extra-file=$BASEPATH/config/$MYSQL_EXTRA_FILE --single-transaction --add-drop-table $DB_NAME > $MYSQL_FILE
    tar -rf ${BACKUP_NAME}.tar $MYSQL_FILE
    rm $MYSQL_FILE
    echo "backup database ${MYSQL_FILE}"
  else
    echo "Not Found MYSQL_EXTRA_FILE ${BASEPATH}/config/${MYSQL_EXTRA_FILE}"
  fi
}

backup_wordpress() {
  EXCLUDE=("${EXCLUDE[@]}" "${EXCLUDE_EXTRA[@]}")
  EXCLUDE=("${EXCLUDE[@]}" "${EXCLUDE_WP_CONTENT[@]}")
  EXCLUDE=("${EXCLUDE[@]}" "${EXCLUDE_WP_CORE[@]}")

  for ((i = 0; i < ${#EXCLUDE[@]}; i++)) {
    EXCLUDE_ARG+=" --exclude ${EXCLUDE[i]}"
  }

  if [ -d "$WP_ROOT_PATH" ]; then
    tar -rf ${BACKUP_NAME}.tar -C $WP_ROOT_PATH . $EXCLUDE_ARG
    echo "backup WordPress files on ${WP_ROOT_PATH}"
  else
    echo "Not Found WP_ROOT_PATH $WP_ROOT_PATH"
  fi
}

create_backup_file() {
  gzip ${BACKUP_NAME}.tar
  echo "backup file ${BACKUP_NAME}.tar.gz"
}

store_s3() {
  if ! type aws > /dev/null 2>&1; then
    echo "Not Found aws commad"
    return;
  fi

  if [ ! $S3_URI ]; then
    return;
  fi

  if [ $AWS_PROFILE ]; then
    export AWS_DEFAULT_PROFILE=$AWS_PROFILE
    echo "set aws profile: ${AWS_PROFILE}"
  fi

  aws s3 mv ${BACKUP_NAME}.tar.gz $S3_URI
  echo "backup ${BACKUP_NAME}.tar.gz to S3"

  S3_FILES=`aws s3 ls $S3_URI | wc -l`
  echo "stored files to S3: ${S3_FILES} files"

  if [ $MAX_SAVED_FILES ] && [ 0 -lt $MAX_SAVED_FILES ] && [ $S3_FILES -gt $MAX_SAVED_FILES ] ; then
    aws s3 ls $S3_URI | sort -n | head -n -$MAX_SAVED_FILES | awk '{ print $4 }' | xargs -I% aws s3 rm ${S3_URI}%
    echo "delete backup files in order of older update date"
    echo "stored files to S3: ${MAX_SAVED_FILES} files"
  fi
}

delete_backup_file() {
  if [ -f ${BACKUP_NAME}.tar.gz ]; then
    rm ${BACKUP_NAME}.tar.gz
    echo "delete local stored backup file: ${BACKUP_NAME}.tar.gz"
  fi
}

load_config $1
check_config
backup_database
backup_wordpress

if [ ! -f ${BACKUP_NAME}.tar ]; then
  echo "Not Found ${BACKUP_NAME}.tar"
  MESSAGE="[Error] [${CONFIG}] Not Found ${BACKUP_NAME}.tar"
  logging
  exit 1
fi

create_backup_file
store_s3
delete_backup_file

MESSAGE="[Success] [${CONFIG}] WordPress Backup complete!"
logging

exit 0
